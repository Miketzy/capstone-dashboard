import React, { useState, useEffect, useContext } from "react";
import axios from "axios";
import Button from "@mui/material/Button";
import { MdMenuOpen } from "react-icons/md";
import { MdOutlineMenu } from "react-icons/md";
import Avatar from "@mui/material/Avatar";
import Menu from "@mui/material/Menu";
import MenuItem from "@mui/material/MenuItem";
import ListItemIcon from "@mui/material/ListItemIcon";
import Logout from "@mui/icons-material/Logout";
import "./ContributorNavbar.css";
import { useNavigate } from "react-router-dom";
import { Link } from "react-router-dom";

import { IoMdNotificationsOutline } from "react-icons/io";
import { Divider } from "@mui/material";
import { MyContext } from "../../pages/Contributor-Home/Contributor-Dashboard/ContributorDashboard";

function ContributorNavbar() {
  const [user, setUser] = useState({
    firstname: "",
    middlename: "",
    lastname: "",
    email: "",
    image: "/images/unknown-person-icon-Image-from_20220304.png",
  });

  const context = useContext(MyContext);

  const [anchorEl, setAnchorEl] = useState(null);
  const [isNotificationOpen, setIsNotificationOpen] = useState(false);
  const [notificationAnchorEl, setNotificationAnchorEl] = useState(null);
  const navigate = useNavigate();

  const handleImageClick = (event) => setAnchorEl(event.currentTarget);
  const handleClose = () => setAnchorEl(null);

  const handleNotificationClick = (event) => {
    setNotificationAnchorEl(event.currentTarget);
    setIsNotificationOpen(true);
  };

  const handleNotificationClose = () => {
    setIsNotificationOpen(false);
    setNotificationAnchorEl(null);
  };

  const fetchUserData = () => {
    axios
      .get("http://localhost:8080/contrbutornavbar", { withCredentials: true })
      .then((response) => {
        if (response.data.message === "Profile retrieved successfully") {
          setUser({
            firstname: response.data.user.firstname || "",
            middlename: response.data.user.middlename || "",
            lastname: response.data.user.lastname || "",
            email: response.data.user.email || "",
            image: response.data.user.image
              ? `http://localhost:8080/uploads/avatar/${response.data.user.image}`
              : "/images/unknown-person-icon-Image-from_20220304.png",
          });
        } else {
          alert("Failed to fetch user data");
        }
      })
      .catch((error) => {
        console.error("Error fetching user data:", error);
        alert("An error occurred while fetching user data. Please try again.");
      });
  };

  useEffect(() => {
    fetchUserData(); // Fetch user data on component mount
  }, []);

  const handleLogout = () => {
    const confirmLogout = window.confirm("Are you sure you want to log out?");
    if (confirmLogout) {
      axios
        .get("http://localhost:8080/logout", { withCredentials: true })
        .then((res) => {
          if (res.data.Message === "Success") {
            setUser({
              firstname: "",
              middlename: "",
              lastname: "",
              email: "",
              image: "/images/unknown-person-icon-Image-from_20220304.png",
            });
            navigate("/"); // Redirect to home or login page
          } else {
            alert("Logout failed: " + (res.data.Message || "Unknown error"));
          }
        })
        .catch((err) => {
          console.error("Logout error:", err);
          alert("An error occurred during logout. Please try again.");
        });
    }
  };

  const handleProfile = () => {
    navigate("/contributor-MyProfile"); // Navigate to user profile
  };

  return (
    <header className="flex items-center">
      <div className="container mx-auto w-full">
        <div className="flex  items-center w-100 flex-row">
          {/* Contributor Text */}
          <div className="col-sm-1  part1">
            <div className="flex items-center ">
              <span className="ml-[-110px]  text-lg font-bold">
                CONTRIBUTOR
              </span>
            </div>
          </div>

          {/* Menu Button */}

          {context.windowWidth > 992 && (
            <div className="col-xs-3 flex items-center part2  res-hide">
              <Button
                className="rounded-circle"
                onClick={() =>
                  context.setIsToggleSidebar(!context.isToggleSidebar)
                }
              >
                {context.isToggleSidebar === false ? (
                  <MdMenuOpen />
                ) : (
                  <MdOutlineMenu />
                )}
              </Button>
            </div>
          )}

          <div className="w-11/12 sm:w-12/12 flex items-center justify-end part3">
            <div className="myAcc1 ml-3">
              <div className="userImage">
                <span className="rounded-full user-icon cursor-pointer">
                  <img
                    src={user.image}
                    alt="User"
                    className="user-image"
                    onClick={handleImageClick}
                  />
                  <Menu
                    anchorEl={anchorEl}
                    id="account-menu"
                    open={Boolean(anchorEl)}
                    onClose={handleClose}
                    PaperProps={{
                      elevation: 0,
                      sx: {
                        overflow: "visible",
                        filter: "drop-shadow(0px 2px 8px rgba(0,0,0,0.32))",
                        mt: 1.5,
                        borderRadius: "8px",
                        "& .MuiAvatar-root": {
                          width: 31,
                          height: 31,
                          ml: -0.5,
                          mr: 1,
                        },
                        "&::before": {
                          content: '""',
                          display: "block",
                          position: "absolute",
                          top: 0,
                          right: 14,
                          width: 10,
                          height: 10,
                          bgcolor: "background.paper",
                          transform: "translateY(-50%) rotate(45deg)",
                          zIndex: 0,
                        },
                      },
                    }}
                    transformOrigin={{ horizontal: "right", vertical: "top" }}
                    anchorOrigin={{ horizontal: "right", vertical: "bottom" }}
                  >
                    <div className="menu" onClick={handleClose}>
                      <div className="avatarAcc">
                        <img src={user.image} alt="" className="avatar" />
                      </div>
                      <div>
                        <h6 className="fname">{`${user.firstname} ${user.middlename} ${user.lastname}`}</h6>
                        <p className="email">{user.email}</p>
                      </div>
                    </div>
                    <hr />
                    <MenuItem onClick={handleProfile}>
                      <Avatar /> Profile
                    </MenuItem>
                    <MenuItem onClick={handleLogout}>
                      <ListItemIcon>
                        <Logout fontSize="small" />
                      </ListItemIcon>
                      Logout
                    </MenuItem>
                  </Menu>
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </header>
  );
}

export default ContributorNavbar;
